/home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/anndata/_core/anndata.py:1840: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
  utils.warn_names_duplicates("var")
/home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/anndata/_core/anndata.py:1840: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
  utils.warn_names_duplicates("var")
/home/yunfei/spatial_dl_integration/MaskGraphene/datasets/data_proc.py:84: SettingWithCopyWarning:
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead
See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  Spatial_Net['Cell1'] = Spatial_Net['Cell1'].map(id_cell_trans)
/home/yunfei/spatial_dl_integration/MaskGraphene/datasets/data_proc.py:85: SettingWithCopyWarning:
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead
See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  Spatial_Net['Cell2'] = Spatial_Net['Cell2'].map(id_cell_trans)
------Calculating spatial graph...
The graph contains 24762 edges, 4221 cells.
5.8664 neighbors per cell on average.
/home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/anndata/_core/anndata.py:1840: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
  utils.warn_names_duplicates("var")
/home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/anndata/_core/anndata.py:1840: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
  utils.warn_names_duplicates("var")
------Calculating spatial graph...
/home/yunfei/spatial_dl_integration/MaskGraphene/datasets/data_proc.py:84: SettingWithCopyWarning:
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead
See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  Spatial_Net['Cell1'] = Spatial_Net['Cell1'].map(id_cell_trans)
/home/yunfei/spatial_dl_integration/MaskGraphene/datasets/data_proc.py:85: SettingWithCopyWarning:
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead
See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  Spatial_Net['Cell2'] = Spatial_Net['Cell2'].map(id_cell_trans)
The graph contains 25692 edges, 4381 cells.
5.8644 neighbors per cell on average.
Traceback (most recent call last):
  File "/home/yunfei/spatial_dl_integration/MaskGraphene/sh_scripts/../maskgraphene_main.py", line 581, in <module>
    a_ari = main(args)
  File "/home/yunfei/spatial_dl_integration/MaskGraphene/sh_scripts/../maskgraphene_main.py", line 461, in main
    batchlist_ = run_mask_graphene_aligner(graph, model_local_ot, device, ad_concat, section_ids, max_epoch=max_epoch, max_epoch_triplet=max_epoch_triplet, optimizer=optimizer, scheduler=scheduler, logger=logger, use_mnn=True)
  File "/home/yunfei/spatial_dl_integration/MaskGraphene/sh_scripts/../maskgraphene_main.py", line 251, in run_mask_graphene_aligner
    graph = graph.to(device)
  File "/home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/heterograph.py", line 5709, in to
    ret._graph = self._graph.copy_to(utils.to_dgl_context(device))
  File "/home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/heterograph_index.py", line 255, in copy_to
    return _CAPI_DGLHeteroCopyTo(self, ctx.device_type, ctx.device_id)
  File "dgl/_ffi/_cython/./function.pxi", line 295, in dgl._ffi._cy3.core.FunctionBase.__call__
  File "dgl/_ffi/_cython/./function.pxi", line 227, in dgl._ffi._cy3.core.FuncCall
  File "dgl/_ffi/_cython/./function.pxi", line 217, in dgl._ffi._cy3.core.FuncCall3
dgl._ffi.base.DGLError: [11:44:53] /opt/dgl/src/runtime/c_runtime_api.cc:82: Check failed: allow_missing: Device API cuda is not enabled. Please install the cuda version of dgl.
Stack trace:
  [bt] (0) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x75) [0x7f681f2e68f5]
  [bt] (1) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(dgl::runtime::DeviceAPIManager::GetAPI(std::string, bool)+0x202) [0x7f681f655d82]
  [bt] (2) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(dgl::runtime::DeviceAPI::Get(DGLContext, bool)+0x1e1) [0x7f681f652361]
  [bt] (3) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(dgl::runtime::NDArray::Empty(std::vector<long, std::allocator<long> >, DGLDataType, DGLContext)+0x13b) [0x7f681f66d83b]
  [bt] (4) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(dgl::runtime::NDArray::CopyTo(DGLContext const&) const+0xc3) [0x7f681f6a8043]
  [bt] (5) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(dgl::UnitGraph::CopyTo(std::shared_ptr<dgl::BaseHeteroGraph>, DGLContext const&)+0x3ff) [0x7f681f7b553f]
  [bt] (6) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(dgl::HeteroGraph::CopyTo(std::shared_ptr<dgl::BaseHeteroGraph>, DGLContext const&)+0xf6) [0x7f681f6b48c6]
  [bt] (7) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(+0x51b686) [0x7f681f6c3686]
  [bt] (8) /home/yunfei/anaconda3/envs/MG/lib/python3.9/site-packages/dgl/libdgl.so(DGLFuncCall+0x48) [0x7f681f651598]
Namespace(seeds=[0, 5, 42, 114514, 2023], dataset='DLPFC', exp_fig_dir='/home/yunfei/spatial_dl_integration/GraphMAE2/MG_exps_1014_1', h5ad_save_dir='/home/yunfei/spatial_dl_integration/GraphMAE2/st_dataset', st_data_dir='/home/yunfei/spatial_benchmarking/benchmarking_data/DLPFC12', consecutive_prior=1, section_ids='151507,151508', num_class=7, hvgs=6500, device=3, max_epoch=1500, max_epoch_triplet=700, warmup_steps=-1, num_heads=1, num_out_heads=1, num_layers=2, num_dec_layers=2, num_remasking=1, num_hidden='512,32', residual=False, in_drop=0.0, attn_drop=0.0, norm=None, lr=0.001, weight_decay=0, negative_slope=0.2, activation='elu', mask_rate=0.05, remask_rate=0.05, remask_method='random', mask_type='mask', mask_method='random', drop_edge_rate=0.0, encoder='gat', decoder='gat', loss_fn='sce', alpha_l=2.0, optimizer='adam', linear_prob=False, no_pretrain=False, checkpoint_path=None, use_cfg=False, logging='False', scheduler=False, batch_size=512, sampling_method='saint', label_rate=1.0, data_dir='/home/yunfei/spatial_benchmarking/benchmarking_data', lam=1.0, full_graph_forward=False, delayed_ema_epoch=0, replace_rate=0.0, momentum=0.996, load_model='False', num_features=3088)
=== Use sce_loss and alpha_l=2.0 ===
num_encoder_params: 1599072, num_decoder_params: 1608240, num_params_in_total: 3245826
PreModel(
  (encoder): GAT(
    (gat_layers): ModuleList(
      (0): GATConv(
        (fc): Linear(in_features=3088, out_features=512, bias=False)
        (feat_drop): Dropout(p=0.0, inplace=False)
        (attn_drop): Dropout(p=0.0, inplace=False)
        (leaky_relu): LeakyReLU(negative_slope=0.2)
        (activation): ELU(alpha=1.0)
      )
      (1): GATConv(
        (fc): Linear(in_features=512, out_features=32, bias=False)
        (feat_drop): Dropout(p=0.0, inplace=False)
        (attn_drop): Dropout(p=0.0, inplace=False)
        (leaky_relu): LeakyReLU(negative_slope=0.2)
      )
    )
    (head): Identity()
  )
  (decoder): GAT(
    (gat_layers): ModuleList(
      (0): GATConv(
        (fc): Linear(in_features=32, out_features=512, bias=False)
        (feat_drop): Dropout(p=0.0, inplace=False)
        (attn_drop): Dropout(p=0.0, inplace=False)
        (leaky_relu): LeakyReLU(negative_slope=0.2)
        (activation): ELU(alpha=1.0)
      )
      (1): GATConv(
        (fc): Linear(in_features=512, out_features=3088, bias=False)
        (feat_drop): Dropout(p=0.0, inplace=False)
        (attn_drop): Dropout(p=0.0, inplace=False)
        (leaky_relu): LeakyReLU(negative_slope=0.2)
      )
    )
    (head): Identity()
  )
  (encoder_to_decoder): Linear(in_features=32, out_features=32, bias=False)
  (projector): Sequential(
    (0): Linear(in_features=32, out_features=512, bias=True)
    (1): PReLU(num_parameters=1)
    (2): Linear(in_features=512, out_features=32, bias=True)
  )
  (projector_ema): Sequential(
    (0): Linear(in_features=32, out_features=512, bias=True)
    (1): PReLU(num_parameters=1)
    (2): Linear(in_features=512, out_features=32, bias=True)
  )
  (predictor): Sequential(
    (0): PReLU(num_parameters=1)
    (1): Linear(in_features=32, out_features=32, bias=True)
  )
  (encoder_ema): GAT(
    (gat_layers): ModuleList(
      (0): GATConv(
        (fc): Linear(in_features=3088, out_features=512, bias=False)
        (feat_drop): Dropout(p=0.0, inplace=False)
        (attn_drop): Dropout(p=0.0, inplace=False)
        (leaky_relu): LeakyReLU(negative_slope=0.2)
        (activation): ELU(alpha=1.0)
      )
      (1): GATConv(
        (fc): Linear(in_features=512, out_features=32, bias=False)
        (feat_drop): Dropout(p=0.0, inplace=False)
        (attn_drop): Dropout(p=0.0, inplace=False)
        (leaky_relu): LeakyReLU(negative_slope=0.2)
      )
    )
    (head): Identity()
  )
)